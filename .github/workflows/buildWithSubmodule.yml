name: Build with yuyansdk & Publish APK

on:
  push:
    tags:
      - v*
    branches:
      - '**'
#  pull_request:
    # branches: [ "master" ]
  workflow_dispatch: { }

env:
  MAIN_NAME: 'kkgit2008/YuyanIme' 
  DEPENDENCY_NAME: 'kkgit2008/yuyansdk'

  MAIN_REPO_BRANCH: 'kkgit2008-patch-1'
  # 当前仓库分支
  DEPENDENCY_REPO_BRANCH: 'kkgit2008-patch-1'
  # 外部仓库分支

  MAIN_REPO_DIR: '.'
  # 将当前仓库检出到临时仓库的目录
  SUBMODULE_DIR: './yuyansdk'
  # 将外部仓库检出到临时仓库的目录>

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      # 矩阵功能
      matrix:
#        build_type: ['debug', 'release']
#        flavor_type: [ offline, online ]
        build_type: ['release']
        flavor_type: [ offline ]

    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.12.1
        with:
          access_token: ${{ github.token }}

#      # 清理已有的MAIN_REPO_DIR，防止冲突
#      - name: Clean workspace
#        run: |
#          rm -rf ${{ env.MAIN_REPO_DIR }}/*

      # 第一步：检出主仓库 (username/repo@branch)
      - name: Checkout Main Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.MAIN_NAME }}
          ref: ${{ env.MAIN_REPO_BRANCH }}
          path: ${{ env.MAIN_REPO_DIR }}
          submodules: true

      # 第二步：检出依赖仓库 (username/repo2@branch2)
      - name: Checkout sub Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.DEPENDENCY_NAME }}
          ref: ${{ env.DEPENDENCY_REPO_BRANCH }}
          path: ${{ env.SUBMODULE_DIR }}
          token: ${{ secrets.GITHUB_TOKEN }}

      # 第三步：验证分支和目录结构
      - name: Verify Branches & Structure
        run: |
          echo ">>验证主仓库分支..."
          cd ${{ env.MAIN_REPO_DIR }}
          CURRENT_MAIN_BRANCH=$(git branch --show-current)
          if [ "$CURRENT_MAIN_BRANCH" != "$MAIN_REPO_BRANCH" ]; then
            echo ">>错误：主仓库分支不匹配！预期: $MAIN_REPO_BRANCH，实际: $CURRENT_MAIN_BRANCH"
            exit 1
          fi
          
          echo ">>验证依赖仓库分支..."
          # cd ..
          cd ${{ env.SUBMODULE_DIR }}
          CURRENT_DEP_BRANCH=$(git branch --show-current)
          if [ "$CURRENT_DEP_BRANCH" != "$DEPENDENCY_REPO_BRANCH" ]; then
            echo ">>错误：依赖仓库分支不匹配！预期: $DEPENDENCY_REPO_BRANCH，实际: $CURRENT_DEP_BRANCH"
            exit 1
          fi
          
          echo ">>目录结构验证通过"

      # 第四步：设置JDK环境
      - name: set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: gradle

      # 第五步：准备构建环境
      - name: Grant execute permission for gradlew
        # working-directory: ${{ env.MAIN_REPO_DIR }}
        run: chmod +x gradlew

      - name: Show project root
        run: |
            echo ">>project root:"
            ls -la
            echo ">>./yuyansdk:"
            ls -la ./yuyansdk
#            exit 1

      # 第六步：构建APK
      - name: Build APK for ${{ matrix.flavor_type }}
        # working-directory: ${{ env.MAIN_REPO_DIR }}
        run: |
          build_type=${{ matrix.build_type }}
          flavor_type=${{ matrix.flavor_type }}
          ./gradlew assemble${flavor_type^}${build_type^}

      - name: Show apk paths
        run: |
            echo ">>${{ env.MAIN_REPO_DIR }}/app/build/outputs/apk/${{ matrix.flavor_type }}/${{ matrix.build_type }}:"
            ls -la ${{ env.MAIN_REPO_DIR }}/app/build/outputs/apk/${{ matrix.flavor_type }}/${{ matrix.build_type }}

      # 第七步：获取版本信息（使用当前时间作为版本号）
      - name: Set release TAG_VERSION_NAME
        id: get_version_info
        run: |
          # 获取当前时间，格式为YYYYMMDD.HH（年-月-日-时）
          #TAG_VERSION_NAME=$(date +"%Y%m%d.%H")
          TAG_VERSION_NAME=$(date +"%Y%m%d")
          echo ">>TAG_VERSION_NAME=${TAG_VERSION_NAME}" >> $GITHUB_ENV
          echo ">>当前版本: ${TAG_VERSION_NAME}"

      # 第八步：复制APK文件
      - name: Copy ${{ matrix.flavor }} APK
        run: |
          src_file="${{ env.MAIN_REPO_DIR }}/app/build/outputs/apk/${{ matrix.flavor_type }}/${{ matrix.build_type }}/yuyanIme_${{ matrix.flavor_type }}_${{ matrix.build_type }}.apk"
          dest_file="${{ env.MAIN_REPO_DIR }}/yuyanIme_${{ matrix.flavor_type }}_${{ matrix.build_type }}.apk"

          if [ -f "$src_file" ]; then
            cp "$src_file" "$dest_file"
            echo ">>APK已复制并重命名为: $dest_file"
            ls -la
          else
            echo ">>错误: 未找到APK文件: $src_file"
            exit 1
          fi

#./app/build/outputs/apk/offline/release/yuyanIme_offline_release.apk

      # 第九步：上传APK
      - name: Upload  APK
        uses: actions/upload-artifact@v4
        with:
          name: yuyanIme_${matrix.flavor_type}_${matrix.build_type}.apk
          path: |
            ${{ env.MAIN_REPO_DIR }}/yuyanIme_${matrix.flavor_type}_${matrix.build_type}.apk

      # 第十步：发布到GitHub Release
      - name: Publish Release
        if: startsWith(github.ref, 'refs/tags/')
        # 仅在有tag时发布
        uses: softprops/action-gh-release@v2
        with:
          body_path: ${{ env.MAIN_REPO_DIR }}/changelog/${{ env.TAG_VERSION_NAME }}/README.md
          # tag_name: ${{ env.TAG_VERSION_NAME }}
          tag_name: ${{ github.ref_name }}
          files: yuyanIme_${matrix.flavor_type}_${matrix.build_type}.apk
          token: ${{ secrets.GITHUB_TOKEN }}
